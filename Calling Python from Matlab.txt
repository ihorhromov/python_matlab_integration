The simplest way to do this is to use MATLAB's system function.So basically, you would execute a Python function on MATLAB as you would do on the command prompt (Windows), or shell (Linux):system('python pythonfile.py')The above is for simply running a Python file. If you wanted to run a Python function (and give it some arguments), then you would need something like:system('python pythonfile.py argument')For a concrete example, take the Python code in Adrian's answer to this question, and save it to a Python file, that is test.py. Then place this file in your MATLAB directory and run the following command on MATLAB:system('python test.py 2')And you will get as your output 4 or 2^2.Note: MATLAB looks in the current MATLAB directory for whatever Python file you specify with the system command.First of all, the Matlab looks for Python in some  default directory. To provide the path to the Python executable, use the pyversion function. For example:pyversion C:\Anaconda3\python.exeLet’s create a list of folders, P, using the Python sys.path variable.P = py.sys.path; Display the Python functions for a list type.methods(P)py.help('list.append')append(P,pwd)py.len(P)for v=P    disp(v)endhttps://uk.mathworks.com/help/matlab/call-python-libraries.html?s_tid=CRUX_lftnavLimitations to Python Supporthttps://uk.mathworks.com/help/matlab/matlab_external/limitations-to-python-support.html 
Create a list of folders, P, using the Python sys.path variable.P = py.sys.path;Display the Python functions for a list type.methods(P)Methods for class py.list:append   count    display  ge       insert   lt       plus     reverse  cell     details  eq       gt       le       mtimes   pop      sort     char     disp     extend   index    list     ne       remove   Methods of py.list inherited from handle.Read the documentation for append.py.help('list.append')Help on method_descriptor in list:list.append = append(...)    L.append(object) -- append object to endAdd the current folder to the end of the path.append(P,pwd)Display number of folders on the path. The list has py.len elements.py.len(P)ans =   Python int with properties:           real: [1x1 py.int]    denominator: [1x1 py.int]           imag: [1x1 py.int]      numerator: [1x1 py.int]